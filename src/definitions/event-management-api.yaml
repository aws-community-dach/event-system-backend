openapi: '3.0.2'
info:
  title: Event management
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /events:
    get:
      tags:
        - Events
      summary: Returns all events
      operationId: listEvents
      responses:
        200:
          description: Returns a list of all events
          $ref: '#/components/responses/ListOfEvents'
    post:
      tags:
        - Events
      summary: Creates a new event
      operationId: createEvent
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        201:
          $ref: '#/components/responses/Event'
          description: Created a new event       
    
  /events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/eventID'
    get:
      tags:
        - Events
      summary: Returns a specific event
      operationId: getEventDetails
      responses:
        200:
          $ref: '#/components/responses/Event'
          description: Returned a specific event
    put:
      tags:
        - Events
      summary: Updates an existing event
      operationId: updateEvent
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
          description: Updated an existing event
    delete:
      tags:
        - Events
      summary: Deletes an existing event
      operationId: deleteEvent
      responses:
        204:
          description: Deleted event
  /events/{eventID}/participants:
    parameters:
        - $ref: '#/components/parameters/eventID'
    get:
      tags:
        - Events
      summary: Returns all participants for a specific event
      operationId: listEventParticipants
      responses:
        200: 
          $ref: '#/components/responses/ListOfParticipants'
          description: Returns all participants for a specific event
    post:
      tags:
        - Events
      summary: Registers a participant for an event
      operationId: registerEventParticipant
      requestBody:
        $ref: '#/components/requestBodies/Participant'
      responses:
        201:
          description: Registered the participant
      
  /events/{eventID}/participants/{participantID}:
    parameters:
      - $ref: '#/components/parameters/eventID'
      - $ref: '#/components/parameters/participantID'
    # How does a user update the data?
    put:
      tags:
        - Events
      summary: Updates participant data
      operationId: updateEventParticipant
      requestBody:
        $ref: '#/components/requestBodies/Participant'
      responses:
        200:
          description: Updated participant data

    delete:
      tags:
        - Events
      summary: Deregisters a participant from an event
      operationId: deleteEventParticipant
      responses:
        204:
          description: Deregistered particpant from event
  
components:
  parameters:
    eventID:
      name: eventID
      in: path
      required: true
      schema:
        type: string
      description: ID of the event
    participantID:
      name: participantID
      in: path
      required: true
      schema:
        type: string
      description: ID of the participant

  requestBodies:
    Participant:
      required: true
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
    Event:
      required: true
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
    EventRegister:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventRegister'
          
  responses:
    Participant:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - $ref: '#/components/schemas/Participant'
    Event:
      description: OK
      content:
        application/json:
          schema:
             allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - $ref: '#/components/schemas/Event'
    EventRegister:
      description: OK
      content:
        application/json:
          schema:
              $ref: '#/components/schemas/EventRegister'
    ListOfParticipants:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListOfParticipants'
    ListOfEvents:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListOfEvents'

  schemas:
    Participant:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        email:
          type: string
        customData:
          type: object
    Event:
      type: object
      properties:
        name:
          type: string
        date:
          type: string
        location:
          type: string
        organizerID:
          type: string
        summary:
          type: string
        description:
          type: string
        agenda:
          type: array
          items:
            $ref: '#/components/schemas/Agenda'
    BaseResponse:
      type: object
      properties:
        id:
          type: string
    EventRegister:
      type: object
      allOf:
        - $ref: '#/components/schemas/Participant'
      properties:
        confirmationId:
          type: string
          # possible validation
    ListOfParticipants:
      type: array
      items:
        allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - $ref: '#/components/schemas/EventRegister'
    ListOfEvents:
      type: array
      items:
        allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - $ref: '#/components/schemas/Event'
    Agenda:
      type: object
      properties:
        start:
          type: string
        end:
          type: string
        title:
          type: string
        
