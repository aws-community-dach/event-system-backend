/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/events": {
    /** Returns all events */
    get: operations["listEvents"];
    /** Creates a new event */
    post: operations["createEvent"];
  };
  "/events/{eventID}": {
    /** Returns a specific event */
    get: operations["getEventDetails"];
    /** Updates an existing event */
    put: operations["updateEvent"];
    /** Deletes an existing event */
    delete: operations["deleteEvent"];
    
  };
  "/events/{eventID}/participants": {
    /** Returns all participants for a specific event */
    get: operations["listEventParticipants"];
    /** Registers a participant for an event */
    post: operations["registerEventParticipant"];
    
  };
  "/events/{eventID}/participants/{participantID}": {
    /** Updates participant data */
    put: operations["updateEventParticipant"];
    /** Deregisters a participant from an event */
    delete: operations["deleteEventParticipant"];
    
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Participant: {
      name?: string;
      displayName?: string;
      email?: string;
    };
    Event: {
      name?: string;
      date?: string;
      location?: string;
      organizerID?: string;
    };
    BaseResponse: {
      id?: string;
    };
    EventRegister: {
      enrolled?: boolean;
    } & components["schemas"]["Participant"];
    ListOfParticipants: (components["schemas"]["BaseResponse"] & components["schemas"]["EventRegister"])[];
    ListOfEvents: (components["schemas"]["BaseResponse"] & components["schemas"]["Event"])[];
  };
  responses: {
    /** @description OK */
    Participant: {
      content: {
        "application/json": components["schemas"]["BaseResponse"] & components["schemas"]["Participant"];
      };
    };
    /** @description OK */
    Event: {
      content: {
        "application/json": components["schemas"]["BaseResponse"] & components["schemas"]["Event"];
      };
    };
    /** @description OK */
    EventRegister: {
      content: {
        "application/json": components["schemas"]["EventRegister"];
      };
    };
    /** @description OK */
    ListOfParticipants: {
      content: {
        "application/json": components["schemas"]["ListOfParticipants"];
      };
    };
    /** @description OK */
    ListOfEvents: {
      content: {
        "application/json": components["schemas"]["ListOfEvents"];
      };
    };
  };
  parameters: {
    /** @description ID of the event */
    eventID: number;
    /** @description ID of the participant */
    participantID: number;
  };
  requestBodies: {
    Participant: {
      content: {
        "application/json": components["schemas"]["Participant"];
      };
    };
    Event: {
      content: {
        "application/json": components["schemas"]["Event"];
      };
    };
    EventRegister: {
      content: {
        "application/json": components["schemas"]["EventRegister"];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  listEvents: {
    /** Returns all events */
    responses: {
      /** @description Returns a list of all events */
      200: components["responses"]["ListOfEvents"];
    };
  };
  createEvent: {
    /** Creates a new event */
    requestBody: components["requestBodies"]["Event"];
    responses: {
      /** @description Created a new event */
      201: components["responses"]["Event"];
    };
  };
  getEventDetails: {
    /** Returns a specific event */
    responses: {
      /** @description Returned a specific event */
      200: components["responses"]["Event"];
    };
  };
  updateEvent: {
    /** Updates an existing event */
    requestBody: components["requestBodies"]["Event"];
    responses: {
      /** @description Updated an existing event */
      200: components["responses"]["Event"];
    };
  };
  deleteEvent: {
    /** Deletes an existing event */
    responses: {
      /** @description Deleted event */
      204: never;
    };
  };
  listEventParticipants: {
    /** Returns all participants for a specific event */
    responses: {
      /** @description Returns all participants for a specific event */
      200: components["responses"]["ListOfParticipants"];
    };
  };
  registerEventParticipant: {
    /** Registers a participant for an event */
    requestBody: components["requestBodies"]["Participant"];
    responses: {
      /** @description Registered the participant */
      201: never;
    };
  };
  updateEventParticipant: {
    /** Updates participant data */
    requestBody: components["requestBodies"]["Participant"];
    responses: {
      /** @description Updated participant data */
      200: components["responses"]["Participant"];
    };
  };
  deleteEventParticipant: {
    /** Deregisters a participant from an event */
    responses: {
      /** @description Deregistered particpant from event */
      204: never;
    };
  };
}
